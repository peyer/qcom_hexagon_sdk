# builds the static/dynamic skel
ifeq (1,$(V_dynamic))
BUILD_DLLS += libsobel3x3_v60_skel
BUILD_DLLS += sobel3x3_v60_q
else
BUILD_LIBS += libsobel3x3_v60_skel
endif


CC_FLAGS += $(MHVX_DOUBLE_FLAG)
ASM_FLAGS += $(MHVX_DOUBLE_FLAG)

# Use -O0 temporarily when trying to debug C code.
#_OPT = -O0

libsobel3x3_v60_skel_QAICIDLS = inc/sobel3x3_v60
libsobel3x3_v60_skel_C_SRCS += $V/sobel3x3_v60_skel \
                               src/sobel3x3_v60_imp 

# choose one of the implementations.                               
libsobel3x3_v60_skel.ASM_SRCS += asm_src/sobel3x3_asm.S
#libsobel3x3_v60_skel.C_SRCS += src/sobel3x3_C_intrinsics.c

# Needs dspCV lib for worker pool
libsobel3x3_v60_skel_DLLS+=libdspCV_skel

# Also build a stand-alone simulation environment executable unit test

BUILD_QEXES += sobel3x3_v60_q
sobel3x3_v60_q_OSTYPE = QURT
# The following is needed to pull QuRT support into the executable for simulation

sobel3x3_v60_q_DLLS+= rpcmem  libdspCV_skel


sobel3x3_v60_q_C_SRCS+= $V/sobel3x3_v60_skel \
                        src/sobel3x3_v60_imp \
                        src/sobel3x3_v60 \

# choose one of the implementations.                               
sobel3x3_v60_q.ASM_SRCS += asm_src/sobel3x3_asm.S
#sobel3x3_v60_q.C_SRCS += src/sobel3x3_C_intrinsics.c

QEXE_EXEC+=--dsp_clock 800

# copy final build products to the ship directory
BUILD_COPIES = \
   $(DLLS) \
   $(EXES) \
   $(LIBS) \
   $(SHIP_DIR)/ ;
