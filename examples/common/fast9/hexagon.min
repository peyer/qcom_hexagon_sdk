# builds the static/dynamic skel
ifeq (1,$(V_dynamic))
BUILD_DLLS += libfast9_skel 
BUILD_DLLS += fast9_q
else
BUILD_LIBS += libfast9_skel
endif


CC_FLAGS += -I$(RTOS_DIR)/include -I../com/inc
ASM_FLAGS += -I../com/inc 

CC_FLAGS += $(MHVX_DOUBLE_FLAG)
ASM_FLAGS += $(MHVX_DOUBLE_FLAG)

#CC_FLAGS += -DDEBUG -g

# Use -O0 temporarily when trying to debug C code.
#_OPT = -O0

libfast9_skel_QAICIDLS = inc/fast9
libfast9_skel_C_SRCS += $V/fast9_skel \
                        src/fast9_imp 

# choose one of the implementations.                               
ifeq ($(SRC),I)
libfast9_skel_C_SRCS += src/fast9_C_intrinsics
else
libfast9_skel.ASM_SRCS += asm_src/fast9_coarse.S
libfast9_skel.ASM_SRCS += asm_src/fast9_fine.S
endif

# Needs dspCV lib for worker pool
libfast9_skel_DLLS+=libdspCV_skel

# Also build a stand-alone simulation environment executable unit test

BUILD_QEXES += fast9_q
fast9_q_OSTYPE = QURT
# The following is needed to pull QuRT support into the executable for simulation

fast9_q_DLLS+= rpcmem libdspCV_skel

fast9_q_C_SRCS+= $V/fast9_skel \
                 src/fast9_imp \
                 src/fast9 \

# choose one of the implementations.
ifeq ($(SRC),I)
fast9_q_C_SRCS += src/fast9_C_intrinsics
else
fast9_q.ASM_SRCS += asm_src/fast9_coarse.S
fast9_q.ASM_SRCS += asm_src/fast9_fine.S
endif

all:

QEXE_EXEC+=--dsp_clock 800

# copy final build products to the ship directory
BUILD_COPIES = \
   $(DLLS) \
   $(EXES) \
   $(LIBS) \
   $(SHIP_DIR)/ ;
