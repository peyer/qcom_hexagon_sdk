/**=============================================================================
Copyright (c) 2016, 2019 QUALCOMM Technologies Incorporated.
All Rights Reserved Qualcomm Proprietary
=============================================================================**/
#ifndef BENCHMARK_IDL
#define BENCHMARK_IDL

#include "AEEStdDef.idl"
#include "remote.idl"

interface benchmark : remote_handle64{

AEEResult setClocks(
    in int32 powerLevel,            // sets the clocks for a given voltage level 
    in int32 latency,               // latency tolerance for low-power states
    in int32 dcvsEnable,             // flag for enabling DCVS
	in boolean useNewPowerLevel     // True: (higher number is higher-power) False : (lower number is higher-power)
	);

AEEResult dilate5x5(
    in sequence<uint8> inp,        // input buffer of unsigned 8-bit values
    in int32 stride_i,             // stride of src image
    in int32 width,                // width of src image
    in int32 height,               // height of src image
	rout sequence<uint8> outp,     // output buffer of unsigned 8-bit values
    in int32 stride_o,             // stride of the dst image
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);

AEEResult dilate3x3(
    in sequence<uint8> inp,        // input buffer of unsigned 8-bit values
    in int32 stride_i,             // stride of src image
    in int32 width,                // width of src image
    in int32 height,               // height of src image
	rout sequence<uint8> outp,     // output buffer of unsigned 8-bit values
    in int32 stride_o,             // stride of the dst image
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);

AEEResult sobel3x3(
    in sequence<uint8> inp,        // input buffer of unsigned 8-bit values
    in int32 stride_i,             // stride of src image
    in int32 width,                // width of src image
    in int32 height,               // height of src image
	rout sequence<uint8> outp,     // output buffer of unsigned 8-bit values
    in int32 stride_o,             // stride of the dst image
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing    
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);

AEEResult integrate(
    in sequence<octet> inp,       // input buffer of unsigned 8-bit values
    in long stride_i,             // stride of src image
    in long width,                // width of rsrc image
    in long height,               // height of rsrc image
	rout sequence<unsigned long> outp,     // output buffer of unsigned 32-bit values
    in long stride_o,             // stride of the dst image
    in int32 LOOPS,               // number of times to iterate
    in int32 wakeupOnly,          // flag to skip processing
    in int32 useComputRes,        // flag to use the compute resource API      
    rout int32 dspUsec,           // profiling result in uSec
    rout int32 dspCyc             // profiling result in cycles
	);
    
AEEResult epsilon(
    in sequence<uint8> src,         // input buffer of unsigned 8-bit values
    in int32 stride,                // stride of the src image
    in int32 width,                 // width of region of interest contained in src image
    in int32 height,                // height of region of interest contained in src image
    in int32 threshold,             // threshold
    rout   sequence<uint8> dst,     // output buffer of unsigned 8-bit values
    in int32 LOOPS,                 // number of times to iterate
    in int32 wakeupOnly,            // flag to skip processing
    in int32 useComputRes,          // flag to use the compute resource API    
    rout int32 dspUsec,             // profiling result in uSec
    rout int32 dspCyc               // profiling result in cycles
	);
    
AEEResult fast9(
    in sequence<octet> im,        // input buffer of unsigned 8-bit values
    in unsigned long stride,      // stride of src image
    in unsigned long xsize,       // xsize
    in unsigned long ysize,       // ysize
    in unsigned long barrier,     // barrier
    in unsigned long border,      // border
    rout sequence<short> xy,      // output buffer for coord of corners
    in long maxnumcorners,        // maxnumcorners
    rout long numcorners,         // num of cornes
    in int32 LOOPS,               // number of times to iterate
    in int32 wakeupOnly,          // flag to skip processing
    in int32 useComputRes,        // flag to use the compute resource API    
    rout int32 dspUsec,           // profiling result in uSec
    rout int32 dspCyc             // profiling result in cycles
    );
    
AEEResult conv3x3(
    in sequence<uint8> inp,        // input buffer of unsigned 8-bit values
    in int32 stride_i,             // stride of src image
    in int32 width,                // width of src image
    in int32 height,               // height of src image
    in sequence<char> mask,        // filter mask
    in int32 shift,                // filter shift
	rout sequence<uint8> outp,     // output buffer of unsigned 8-bit values
    in int32 stride_o,             // stride of the dst image
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);
    
AEEResult gaussian7x7(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
    in uint32 srcWidth,            // width of region of interest contained in src image
    in uint32 srcHeight,           // height of region of interest contained in src image
    in uint32 srcStride,           // stride of the src image
    rout   sequence<uint8> dst,    // output buffer of unsigned 8-bit values
    in uint32 dstStride,           // stride of the dst image
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);
    
AEEResult bilateral9x9(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
    in int32 stride,               // stride of the src image
    in int32 width,                // width of region of interest contained in src image
    in int32 height,               // height of region of interest contained in src image
    rout   sequence<uint8> dst,    // output buffer of unsigned 8-bit values
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
    );

AEEResult fft1024(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
    rout   sequence<int32> dst,    // output buffer - each row has 1024 real Q29.3 values followed by corresponding 1024 Q29.3 imaginary
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
    );

AEEResult gather(
    in sequence<uint8> inp,        // input buffer of unsigned 8-bit values
	rout sequence<uint8> outp,     // output buffer of unsigned 8-bit values
    in int32 width,                // width of src image
    in int32 height,               // height of src image
    in int32 nPatches,             // number of patches to gather
    in int32 horizStep,            // horizontal step size from one patch to the next (modulo width)
    in int32 vertStep,             // vertical step size from one patch to the next (modulo height)
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);

AEEResult scatter(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
	inrout sequence<uint8> dst,    // output buffer of unsigned 8-bit values
    in int32 width,                // width of dst image
    in int32 height,               // height of dst image
    in int32 nPatches,             // number of patches to scatter
    in int32 horizStep,            // horizontal step size from one patch to the next (modulo width)
    in int32 vertStep,             // vertical step size from one patch to the next (modulo height)
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
	);

AEEResult crash10(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
    in int32 stride,               // stride of the src image
    in int32 width,                // width of region of interest contained in src image
    in int32 height,               // height of region of interest contained in src image
    rout   sequence<uint8> dst,    // output buffer of unsigned 8-bit values
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
    );

AEEResult warp(
    in sequence<uint8> src,        // input buffer of unsigned 8-bit values
    rout sequence<uint8> dst,      // output buffer of unsigned 8-bit values
    in int32 width,                // width of src image
    in int32 height,               // height of src image
    in int32 srcStride,	           // stride of the src image
    in int32 dstStride,        	   // stride of the dst image
    in sequence<uint8> gridarr,    // grid array
    in int32 gridStride,           // stride of the grid
    in int32 LOOPS,                // number of times to iterate
    in int32 wakeupOnly,           // flag to skip processing
    in int32 useComputRes,         // flag to use the compute resource API    
    rout int32 dspUsec,            // profiling result in uSec
    rout int32 dspCyc              // profiling result in cycles
    );           
};

#endif //BENCHMARK_IDL
