# builds the static/dynamic skel
ifeq (1,$(V_dynamic))
BUILD_DLLS += libsigma3x3_v60_skel
BUILD_DLLS += sigma3x3_v60_q
else
BUILD_LIBS += libsigma3x3_v60_skel
endif


CC_FLAGS += $(MHVX_DOUBLE_FLAG)
ASM_FLAGS += $(MHVX_DOUBLE_FLAG)

# Use -O0 temporarily when trying to debug C code.
#_OPT = -O0

libsigma3x3_v60_skel_QAICIDLS = inc/sigma3x3_v60
libsigma3x3_v60_skel_C_SRCS += $V/sigma3x3_v60_skel \
                               src/sigma3x3_v60_imp 

# choose one of the implementations.                               
libsigma3x3_v60_skel.C_SRCS += src/sigma3x3_C_intrinsics.c

# Needs dspCV lib for worker pool
libsigma3x3_v60_skel_DLLS+=libdspCV_skel

# Also build a stand-alone simulation environment executable unit test

BUILD_QEXES += sigma3x3_v60_q
sigma3x3_v60_q_OSTYPE = QURT
# The following is needed to pull QuRT support into the executable for simulation

sigma3x3_v60_q_DLLS+= rpcmem  libdspCV_skel


sigma3x3_v60_q_C_SRCS+= $V/sigma3x3_v60_skel \
                        src/sigma3x3_v60_imp \
                        src/sigma3x3_v60 \

# choose one of the implementations.                               
sigma3x3_v60_q.C_SRCS += src/sigma3x3_C_intrinsics.c

all:

QEXE_EXEC+=--dsp_clock 800

# copy final build products to the ship directory
BUILD_COPIES = \
   $(DLLS) \
   $(EXES) \
   $(LIBS) \
   $(SHIP_DIR)/ ;
