# Change to a truthful value if you want to emit checker nodes
EMIT_CHECKS: False

# If you see three outputs, use quantization-aware checker
USE_CHECK_Q: False

# Change to a truthful value if we should use constant input values
# for each node instead of the results of previous nodes, this helps
# you test each piece individually
CHECKS_ONLY: False

# If you want just the const input
USE_CONST_INPUT: False

# Almost certainly you will want to change start_node(s), end_node, and input_values below.
start_node: Mul
end_node: softmax
start_nodes: Mul
image_height: 299
image_width: 299
image_depth: 3

# If you want to only emit checks at certain ops, try this
check_filter: ['QuantizedRelu','QuantizedConcat','QuantizedMaxPool','QuantizedAvgPool','QuantizedRelu6']


# Other examples of possible values for some of the configurations

#start_node = "Mul"
#start_nodes = [ "Mul" ]
#end_node = "softmax"

#start_node = "inputs"
#start_nodes = [ "inputs" ]
#end_node = "YOLO_net/concat"
#input_values = {
# "inputs:0" : np.zeros((1,448,448,3))
#}

# Start node: what we will change to an INPUT node.

# If you want to have a specific input, try this:
#import panda_data
#start_node = "Mul"
#start_nodes = [ "Mul" ]
#end_node = "softmax"
#input_values = {
# #'Mul:0' : np.zeros((1,299,299,3)),
# 'Mul:0' : np.array(panda_data.data),
#}

#start_node = "input"
#start_nodes = [ "input" ]
#end_node = "softmax/Softmax"
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/batchnorm/mul_1/eightbit/requant_range'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_2_pointwise/BatchNorm/batchnorm/mul_1/eightbit/(eightbit)'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6/eightbit'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/add_1/eightbit/requantize'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/mul_1'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/add_1_eightbit/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/mul_1/quantize'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/add_1_eightbit/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/mul_1/max'
#end_node = 'MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/add_1_eightbit/MobilenetV1/MobilenetV1/Conv2d_1_depthwise/BatchNorm/batchnorm/mul_1/min'
#end_node = 'MobilenetV1/Conv2d_1_depthwise/depthwise_weights'
#input_values = {
# #'input:0' : np.zeros((1,224,224,3)),
# 'input:0' : panda_224_data(),
#}

#start_node = "image"
#start_nodes = [ "image", "center" ]
#end_node = "Sigmoid"
#input_values = {
# 'image:0' : np.zeros((256,256,3)),
# 'center:0' : np.zeros((2))
#}

#start_node = "input"

#start_node = "pie/input"
#start_nodes = [
# "pie/input",
# "pie/lstm1/previous_output_state",
# "pie/lstm1/previous_cell_state",
# "pie/lstm2/previous_output_state",
# "pie/lstm2/previous_cell_state",
#]
#input_values = {
# "pie/input:0" : np.array([[0.787926],[0.151646],[0.071352],[0.118426],[0.458058]]),
# "pie/lstm1/previous_output_state:0" : np.zeros((16,1)),
# "pie/lstm1/previous_cell_state:0" : np.zeros((20,1)),
# "pie/lstm2/previous_output_state:0" : np.zeros((16,1)),
# "pie/lstm2/previous_cell_state:0" : np.zeros((20,1)),
#}

#start_node = "input_0"
#start_nodes = [
# "input_0",
# "lstm1_output_state",
# "lstm1_cell_state",
#]
#input_values = {
# "input_0:0" : np.array([[0.487833,0.631780,0.921237,0.068649,0.259008]]),
# "lstm1_output_state:0" : np.zeros((1,3)),
# "lstm1_cell_state:0" : np.zeros((1,7)),
#}


#start_node = 'input'
#start_nodes = [
# "input",
# "style_num",
#]
#input_values = {
# "input:0" : np.zeros((1,1024,1024,3)),
# "style_num:0" : np.array([0.0] * 13 + [1.0] + [0.0] * 12),
#}


# This node will be changed to an OUTPUT node
#end_node = "softmax"
#end_node = "softmax2"
#end_node = "pie/output"

#start_node = "Mul"
#start_nodes = [ "Mul" ]
#input_values = {
# 'Mul:0' : np.zeros((1,299,299,3)),
#}
#end_node = "InceptionResnetV2/Logits/Predictions"

#start_node = "Placeholder"
#start_nodes = [ "Placeholder" ]
#input_values = {
# 'Placeholder:0' : np.zeros((1,1920,1080,3)),
#}
#end_node = "rpn_conv/3x3/rpn_conv/3x3/(3x3)"
