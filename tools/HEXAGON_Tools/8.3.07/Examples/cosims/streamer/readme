
STREAMER INTERFACE COSIM

The streamer interface cosim module emulates a camera streaming
interface to the Hexagon processor. The Hexagon interface supports
up to two unique streamers, with a dedicated input and output for
each streamer for a total of four possible cosim modules. The camera
streamers are clocked separately core and therefore may run at a
different frequency than the Hexagon core.


-------------------
Cosim configuration
-------------------

The streamer interface cosim module can be instantiated up to four
times during a simulation session. The module can be configured
as an input or output device, using settings specified in the cosim
configuration file.

The cosim configuration file is a text file which contains between
one and four module configuration settings specifications. Each
specification exists on a separate line in the file, and represents
a specific configuration of the streamer interface cosim.

A settings specification has the following format:

 Streamer.(so|dll) <name> <base_addr> <end_addr> <freq> <direction> <ID>

For example:

 Streamer.so streamer_in_0 0xd0000000 0xd00000ff 600000000 in 0

The first argument always specifies the file name of the cosim module.
On Windows the file suffix is ".dll"; on Linux it is ".so".

The <name> argument specifies the name that will be used to identify the
streamer interface in the simulation output.

<base_addr> and <end_addr> specify the start and end addresses of the
camera streamer interface visible on the system bus.

<freq> specifies the clock frequency of the camera streamer.

<direction> specifies whether the streamer cosim is emulating an input or
output device. It can assume the value "in" or "out".

<ID> uniquely identifies the available streamers. It can assume the value
"0" or "1" - any other value results in undefined behavior.

---------------
Example program
---------------

The streamer example program builds the streamer interface cosim module
and then runs a simulation with the cosim module attached. The simulation
runs a memcpy test which uses both streamers and the HVX coprocessor to
first move a set of predefined pixel data into DSP TCM memory, and then
move the data back out to a separate output file.

The "src" directory contains the top-level makefile and the source code
for the streamer cosim.

For details on the APIs used in the cosim source, and how to use a cosim
configuration file, see the "Hexagon Simulator System API User Guide".

For details on how to run the simulator with a cosim module, see the
"Hexagon Simulator User Guide".


-------------------
Directory structure
-------------------

The streamer interface cosim example has the following directory
structure:

./readme
./src/
  - streamer.c: source code for streamer cosim module.
  - makefile: top-level makefile that builds cosim
    and test. See 'Makefile build targets' section below
    for details on the build targets of interest.
./test/
  /asm_src/
    - hvx_copy_line: assembly routine which uses HVX instructions
      to efficiently copy data into and out of the TCM buffers
      dedicated to the streamer.
  /include/
    - streamer_swif.h: software interface for the Hexagon camera
      streamer. For details see the "Camera Streaming Programming
      Interface" documentation.
  /input/
    - bayer_3k_x_2k.in: input file with text representations of
      pixel data. The data is read as text and converted to integer
      values by the input cosim(s) before being pushed to the
      streamer interface. The reverse happens when the data is
      pulled out of the streamer interface by the output cosim(s)
      before being written to an output file.
  /memcpy_test/
    - test_memcpy.c: source for Hexagon memcpy test.
    - cosim.cfg: cosim configuration file.
    - interface_to_img.py: image-conversion Python script (used
      for the make check described below).
    - makefile: build rules for memcpy test. This makefile is
      called by the top-level cosim makefile to build the test.

----------------------
Makefile build targets
----------------------

The following "make" commands can be run in a command shell from
the "src" directory:

> make clean
  - removes all build and output directories for the cosim and the
    test, including any intermediate files generated by the build.

> make (or 'make all')
  - builds the cosim and the memcpy test, and then invokes a
    simulation run with the cosim and the memcpy test. For more
    information on what you should see on completion of a
    successful run, see the section below titled "Expected output".

> make check
  - runs a data integrity check on the output vs the input. The Python
    script "interface_to_img.py" (which is stored in test/memcpy_test)
    converts the input and output to binary files and diff's them. If
    the diff finds any differences in the binaries, the differences are
    printed to stdout. If the binaries match, no output is printed.


---------------
Simulator output
---------------

A successful streamer interface cosimulation generates output similar to
what is shown below.

In the output lines preceded by the character "@', the term "SOF" indicates
the start of file, "EOF" the end of file, "s0" or "s1" the streamer ID, and
the numbers indicate lines in a file. If you want to visually inspect the
output, the values listed for "TX-SOF" and "TX-EOF" indicate the beginning
and end lines where valid data was written to the output file.

NOTE - The rest of the output shown below is standard simulator output - for
details see the "Hexagon Simulator User Guide".


Using values 3072 2048 /local/work/streamer_cosim/src/../input/\
     bayer_3k_x_2k.in /local/work/streamer_cosim/src/../output/bayer.out
starting...
@         1 : s0 : RX-SOF
@         1 : s1 : RX-SOF
@     16009 : s0 : TX-SOF
@     19210 : s1 : TX-SOF
@   6555650 : s0 : RX-EOF
@   6555650 : s1 : RX-EOF
@   6571658 : s0 : TX-EOF
@   6574859 : s1 : TX-EOF

Done!
	T0: Insns=1343590 Packets=475968
	T1: Insns=0 Packets=0
	T2: Insns=0 Packets=0
	T3: Insns=0 Packets=0
	Total: Insns=1343590 Pcycles=6698497
	Simulator speed=0.018151 Mips
	Ratio to Real Time (700 MHz) = ~1/7735 (elapsed time = 74.021217s)


---------------------
Platform dependencies
---------------------

Windows:
--------
Building the streamer example program on Windows requires MSVS 2015. 

Building on Windows additionally requires MinGW to be installed, to
support the various utilities used in the build. After initializing the
MSVC variables, invoke a bash shell from inside the command shell (as
described above) before calling any of the make commands.

Linux:
------
Building the streamer example program on Linux requires a version of
GCC that is compatible with 4.8.4 to be installed in your system path.


In both Windows and Linux, the cosim path and name must be specified
in a file that is passed to the simulator using the simulator option
--cosim_file. For example:

      --cosim_file ${COSIM_PATH}/${COSIM_LIB} (configuration options)

... where:

${COSIM_LIB} = Streamer.so  on Linux
${COSIM_LIB} = Streamer.dll on Windows


