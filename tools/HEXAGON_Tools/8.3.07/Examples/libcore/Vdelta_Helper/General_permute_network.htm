<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252"> <title> General permute network </title> 
	<style type="text/css">
		tt { font-size: 8pt; }
		A { text-decoration: none }
	</style>
				</head>
		<body bgcolor="#ffffff">
		<h1>  HVX / PERMUTE / <i>General permute network</i> </h1>
		<hr color="#000000" noshade="noshade" size="3">
		<p> 
		</p><blockquote>
		<table style="table-layout: fixed; width: 100%">
		<tbody><tr><td style="word-wrap: break-word" bgcolor="#ffffff">
		
Perform permutation and re-arrangement of the 64 input bytes, which is 
the width of a
data slice. The input data is passed through a network of switch boxes, 
these are able to take two inputs and based on the two controls 
can pass through, swap, replicate the first input, or replicate the 
second input. Though the functionality is powerful the algorithms to 
compute the controls are complex.
<p> The input vector of bytes is passed through six levels of switches 
which have an  increasing stride varying from 1 to 32 at the 
last stage. The diagram below shows the vrdelta network, the vdelta 
network is the mirror image, with the largest stride first followed by 
smaller strides down to 1. Each stage output is controlled by the 
control inputs in the vector register Vv. For each stage (for example 
stage 3), the bit at that position would look at the corresponding bit 
(bit 3) in the control byte. This is shown in the switch box in the 
diagram.
</p><p> There are two main forms of data rearrangement. One uses a 
simple reverse butterfly network shown as vrdelta, and a butterfly 
network vdelta shown below. These are known as blocking networks, as not
 all possible
paths can be allowed, simultaneously from input to output. 
The data does not have to be a permutation, defined as a one-to-one 
mapping of every input to its own output position. A subset of data 
rearrangement such as data replication can be accommodated. It can 
handle a family of patterns that have symmetric properties.
</p><p><left><img src="General_permute_network_files/pic_cvi_vrdelta_ex.png"></left></p>    
<p><left><img src="General_permute_network_files/pic_cvi_vdelta_ex.png"></left></p>
    
An example is shown in the diagram above of such a valid pattern using 
an 8-element vrdelta network for clarity: 0,2,4,6,7,5,3,1. 
<p>However the desired pattern 0,2,4,6,1,3,5,7 is not possible, as this 
overuses available paths in the trellis. The position of the output for a
 particular input is determined by using the bit sequence produced by 
the destination position D from source position S.
The bit vector for the path through the trellis is a function of this 
destination bit sequence. In the example D = 7, S = 1, the element in 
position 1 is to be moved to position 7. The first switch box control 
bit at position 1 is 0, the next control bit at position 3 is 1, and 
finally the bit at position 7 is 1, yielding the sequence 0,1,1. Also, 
element 6 is moved to position 3, with the control vector 1,0,1. Bits 
must be placed at the appropriate position in the control bytes to guide
 the inputs to the desired positions. Every input can be placed into any
 output, but certain 
combinations conflict for resources, and so the rearrangement is not 
possible. A total of 512 control bits are required for a single vrdelta 
or vdelta slice.
</p><p>Example of a permitted 
arrangement:0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,63,61,59,57,55,53,51,49,47,45,43,41,39,37,35,33,31,29,27,25,23,21,19,17,15,13,11,9,7,5,3,1
</p><p> controls = 
{0x00,0x02,0x05,0x07,0x0A,0x08,0x0F,0x0D,0x14,0x16,0x11,0x13,0x1E,0x1C,0x1B,0x19,0x28,0x2A,0x2D,0x2F,0x22,0x20,0x27,0x25,0x3C,0x3E,0x39,0x3B,0x36,0x34,0x33,0x31,0x10,0x12,0x15,0x17,0x1A,0x18,0x1F,0x1D,0x04,0x06,0x01,0x03,0x0E,0x0C,0x0B,0x09,0x38,0x3A,0x3D,0x3F,0x32,0x30,0x37,0x35,0x2C,0x2E,0x29,0x2B,0x26,0x24,0x23,0x21}
</p><p>Similarly, here is a function that replicates every 4th element: 
 
0,0,0,0,4,4,4,4,8,8,8,8,12,12,12,12,16,16,16,16,20,20,20,20,24,24,24,24,28,28,28,28,32,32,32,32,36,36,36,36,40,40,40,40,44,44,44,44,48,48,48,48,52,52,52,52,56,56,56,56,60,60,60,60
</p><p>Valid controls = 
{0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03,0x00,0x01,0x02,0x03}

</p><p> The other general form of permute is a Benes Network, which 
requires a vrdelta immediately followed by a vdelta operation. This form
 is 
non-blocking: any possible permute, however random, can be accommodated,
 though it has to be a permutation, each input must have a position in 
the
output. Replication can be performed by using a pre- or 
post-conditioning vrdelta pass to perform the replications before or 
after the permute. 
</p><p> Element sizes larger than a byte can be implemented by grouping 
bytes together and moving them to a group in the output. An example of a
 
general permute is the following random mix, where the 64 inputs are put
 in the following
 output positions: 33,42,40,61,28, 
6,17,16,12,38,57,21,58,63,37,13,26,51,50,23,46, 5,52,53, 0,25,39, 
7,10,19,18,56,44,41,11,14,43,45, 3,35,32,60,15,55,22,24,48, 9, 4,31,27, 
8, 2,62,30,34,54,20,49,59,29,47,36
</p><p>vrdelta controls ={0x00, 0x00, 0x21, 0x21, 0x20, 0x02, 0x00, 
0x02, 0x20, 0x22, 0x00, 0x06, 0x23, 0x23, 0x02, 0x26, 0x06, 0x04, 0x2A, 
0x0C, 0x2D, 0x2F, 0x20, 0x2E, 0x04, 0x00, 0x09, 0x29, 0x0C, 0x0A, 0x20, 
0x0A, 0x05, 0x0F, 0x29, 0x2B, 0x2C, 0x0E, 0x11, 0x13, 0x31, 0x2F, 0x08, 
0x0A, 0x2A, 0x3E, 0x02, 0x32, 0x0B, 0x07, 0x26, 0x0E, 0x2A, 0x2E, 0x36, 
0x36, 0x1D, 0x07, 0x01, 0x2B, 0x0C, 0x1E, 0x21, 0x13}
</p><p>vdelta controls={ 0x1D, 0x01, 0x00, 0x00, 0x1D, 0x1B, 0x00, 0x1A,
 0x1E, 0x02, 0x13, 0x03, 0x0C, 0x18, 0x10, 0x08, 0x1A, 0x06, 0x07, 0x03,
 0x11, 0x1D, 0x0D, 0x11, 0x19, 0x03, 0x15, 0x03, 0x03, 0x19, 0x1F, 0x01,
 0x1B, 0x1B, 0x06, 0x12, 0x18, 0x00, 0x1D, 0x09, 0x1A, 0x0E, 0x02, 0x02,
 0x0B, 0x05, 0x0A, 0x18, 0x1D, 0x1F, 0x01, 0x17, 0x14, 0x06, 0x19, 0x0F,
 0x1D, 0x0D, 0x05, 0x01, 0x06, 0x06, 0x0F, 0x1B}
</p><p>
</p><h4>Use these applications to find your vdelta/vrdelta controls for a Benes-type network or vrdelta only for a simple Delta network.</h4>
<p>For the Benes control all outputs must be used. In the Delta network X is a don't-care output and replication is allowed. </p>
<form action="javascript:void(0);">
<input name="bytes" value="64" checked="checked" onmouseup="set_logN6();" type="radio">N=64 Byte
<input name="bytes" value="128" onmouseup="set_logN7();" type="radio">N=128 Byte <i><font size="-2">*Resets TPERM(X)[N] default values</font></i><br><br>
<input id="logN" value="6" type="hidden">
<input id="runmain" value="main" type="hidden">
<input id="runsimple" value="simpleperm" type="hidden">
        TPERM[N]: <input value="0 ,2 ,3 ,4 ,6 ,7 ,8 ,9 ,11,12,13,14,16,17,18,19,21,22,23,24,26,27,28,29,31,32,33,35,36,37,38,40,41,42,43,45,46,47,48,50,51,52,53,55,56,57,58,60,61,62,1 ,5 ,10,15,20,25,30,34,39,44,49,54,59,63" id="tperm" maxlength="500" size="100" name="tperminput" "="" onkeypress="if (event.which == 13) outer_function(runmain.value,tperm.value);" type="text"><br>
<input value="Submit for Benes" onmouseup="outer_function(runmain.value,tperm.value)" type="button"><br>

TPERMX[N]: <input value="1,2,3,5,6,7,8,10,11,12,13,15,16,17,18,20,21,22,23,25,26,27,28,30,31,32,34,35,36,37,39,40,41,42,44,45,46,47,49,50,51,52,54,55,56,57,59,60,61,62,X,X,X,X,X,X,X,X,X,X,X,X,X,X" id="tpermx" maxlength="500" size="100" name="tperminputx" onkeypress="if (event.which == 13) outer_function(runsimple.value,tpermx.value);" type="text"><br>
<input value="Submit for Delta" onmouseup="outer_function(runsimple.value,tpermx.value)" type="button"><br>

</form>
<div id="ccode">
Hit Submit to get your controls
</div>

<script type="text/javascript" src="General_permute_network_files/vdeltardelta.js"></script>

<p><img img="" src="General_permute_network_files/pic_cvi_vrdelta.png" align="left"></p>    

        
		</td></tr>
		</tbody></table>
		</blockquote>
		<p>
		<table cellspacing="4" width="100%">
		<tbody><tr><td width="40%"> <font size="+2"><b> Syntax </b></font> </td> 
		<td width="60%"> <font size="+2"><b> Behavior </b></font> </td> 
		
			</tr><tr>
			<td bgcolor="#ccffcc" valign="top" width="40%"><font color="black"><tt><b> Vd=vdelta(Vu,Vv) </b></tt></font></td>
			<td bgcolor="#ccffcc" valign="top" width="60%"><font color="black"><tt><b>  ;<br>
 ;<br>
 for (offset=VWIDTH; (offset&gt;&gt;=1)&gt;0; ) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k&lt;VWIDTH; k++) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vd.ub[k] = (Vv.ub[k]&amp;offset) ? Vu.ub[k^offset] : Vu.ub[k];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;};<br>
 &nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k&lt;VWIDTH; k++) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vu.ub[k] = Vd.ub[k];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;};<br>
 };<br>
  </b></tt></font></td>
			</tr>
			
			<tr>
			<td bgcolor="#ccffcc" valign="top" width="40%"><font color="black"><tt><b> Vd=vrdelta(Vu,Vv) </b></tt></font></td>
			<td bgcolor="#ccffcc" valign="top" width="60%"><font color="black"><tt><b>  ;<br>
 ;<br>
 for (offset=1; offset&lt;VWIDTH; offset&lt;&lt;=1){<br>
 &nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k&lt;VWIDTH; k++) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vd.ub[k] = (Vv.ub[k]&amp;offset) ? Vu.ub[k^offset] : Vu.ub[k];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;};<br>
 &nbsp;&nbsp;&nbsp;&nbsp;for (k = 0; k&lt;VWIDTH; k++) {<br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vu.ub[k] = Vd.ub[k];<br>
 &nbsp;&nbsp;&nbsp;&nbsp;};<br>
 };<br>
  </b></tt></font></td>
			</tr>
			
		</tbody></table>
		</p><p>
	
		</p><h2>Type: COPROC_VX <i>(slots <font color="green">0,1,2,3</font>)</i> </h2>
	<h2>Notes:</h2><ul><li>This instruction uses the HVX permute resource.</li>
</ul>
 <h2>Encoding:</h2><table bgcolor="#000000" border="0" cellspacing="1" width="100%"><colgroup span="32" width="1%">
</colgroup><tbody><tr id="enctr">
<td bgcolor="#ffffff"><font style="font-size: 6pt">31</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">30</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">29</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">28</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">27</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">26</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">25</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">24</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">23</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">22</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">21</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">20</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">19</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">18</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">17</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">16</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">15</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">14</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">13</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">12</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">11</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">10</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">9</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">8</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">7</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">6</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">5</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">4</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">3</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">2</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">1</font></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">0</font></td>
<td bgcolor="#ffffff">&nbsp;</td><td bgcolor="#ffffff">&nbsp;</td><td bgcolor="#ffffff">&nbsp;</td></tr>
<tr>
<td colspan="4" bgcolor="#ffffff"><font style="font-size: 6pt">ICLASS</font></td>
<td colspan="12" bgcolor="#ffffff">&nbsp;</td>
<td colspan="2" bgcolor="#ffffff"><font style="font-size: 6pt">Parse</font></td>
<td colspan="1" bgcolor="#ffffff">&nbsp;</td>
<td colspan="5" bgcolor="#ffffff"><font style="font-size: 6pt">u5</font></td>
<td colspan="3" bgcolor="#ffffff">&nbsp;</td>
<td colspan="5" bgcolor="#ffffff"><font style="font-size: 6pt">d5</font></td><td bgcolor="#ffffff"><font style="font-size: 6pt">Tag</font></td>
<td bgcolor="#ffffff"><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[#7] Qd4=(Vu32, Vv32)</tt></td>
<td bgcolor="#ffffff"><font style="font-size: 6pt">Timing</font></td>
</tr>
<tr>
	<td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>P</tt></td><td bgcolor="#448844"><tt>P</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td>
	<td bgcolor="#ffffff"><font style="font-size: 8pt">V6_vdelta</font></td>
	<td bgcolor="#ccffcc"><a href="http://larch/gitbuilder/arch/pkg/v60_latest/doc/page-HVX_PERMUTE_vbenes.html"><font style="font-size: 8pt">Vd=vdelta(Vu,Vv)</font></a></td>
	<td bgcolor="lightgray"><font style="font-size: 8pt">tc_1</font></td>
</tr>
<tr>
	<td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>v</tt></td><td bgcolor="#448844"><tt>P</tt></td><td bgcolor="#448844"><tt>P</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#448844"><tt>u</tt></td><td bgcolor="#66ff66"><tt>0</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#66ff66"><tt>1</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td><td bgcolor="#448844"><tt>d</tt></td>
	<td bgcolor="#ffffff"><font style="font-size: 8pt">V6_vrdelta</font></td>
	<td bgcolor="#ccffcc"><a href="http://larch/gitbuilder/arch/pkg/v60_latest/doc/page-HVX_PERMUTE_vbenes.html"><font style="font-size: 8pt">Vd=vrdelta(Vu,Vv)</font></a></td>
	<td bgcolor="lightgray"><font style="font-size: 8pt">tc_1</font></td>
</tr>
</tbody></table>
<p>
<table bgcolor="#ffffff" border="0" width="100%%">
<tbody><tr><td width="100"><b>Field Name</b></td><td><b>Description</b></td></tr>
<tr><td align="right" width="100"><tt><b>ICLASS:</b></tt></td><td><font style="font-size: 8pt">Instruction Class</font></td></tr>
<tr><td align="right" width="100"><tt><b>Parse:</b></tt></td><td><font style="font-size: 8pt">Packet/Loop parse bits</font></td></tr>
<tr><td align="right" width="100"><tt><b>d5:</b></tt></td><td><font style="font-size: 8pt">Field to encode register d</font></td></tr>
<tr><td align="right" width="100"><tt><b>u5:</b></tt></td><td><font style="font-size: 8pt">Field to encode register u</font></td></tr>
<tr><td align="right" width="100"><tt><b>v5:</b></tt></td><td><font style="font-size: 8pt">Field to encode register v</font></td></tr>
</tbody></table>
<br><table border="0"><tbody><tr><td width="100"><b>Timing Class</b></td><td><b>Description</b></td></tr>
<tr><td align="right" width="100"><tt>tc_1:</tt></td><td><font style="font-size: 8pt">Early
 or late operands. Only start execution in the beginning of stage 2C.  
Once execution starts, takes 1 cycle to generate results at the end of 
stage 2C.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_2:</tt></td><td><font style="font-size: 8pt">Early
 or late operands. Only start execution in the beginning of stage 2C. 
Once execution starts, takes 2 cycles to generate results at the end of 
stage 3A.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_2early:</tt></td><td><font style="font-size: 8pt">Early
 operands. Only start execution in the beginning of stage 2B. Once 
execution starts, takes 2 cycles to generate results at the end of stage
 2C. Predicates are forwarded.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_3:</tt></td><td><font style="font-size: 8pt">Early
 operands. Only start execution in the beginning of stage 2B. Once 
execution starts, takes 3 cycles to generate results at the end of stage
 3A. Must be dispatched at least three cycles after the previous 
dispatch (Ref HW issue 1231).</font></td></tr>
<tr><td align="right" width="100"><tt>tc_3stall:</tt></td><td><font style="font-size: 8pt">Early
 operands for Rss, Rtt. Late operands for Rxx (if applicable). Only 
start execution in the beginning of stage 2B. Once execution starts, 
takes 3 cycles to generate results at the end of stage 3A. No dependency
 checks. All instructions following this instruction WILL start after 3 
cycles. This is indicated by the NOBSB3 timing attribute.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_3x:</tt></td><td><font style="font-size: 8pt">Early
 operands for Rss, Rtt. Late operands for Rxx. Only start execution in 
the beginning of stage 2B. Once execution starts, takes 3 cycles to 
generate results at the end of stage 3A.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_4x:</tt></td><td><font style="font-size: 8pt">Early
 operands for Rss, Rtt. Late operands for Rxx. Only start execution in 
the beginning of stage 2B. Once execution starts, takes 4 cycles to 
generate results at the end of stage 3B.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_ld:</tt></td><td><font style="font-size: 8pt">Early
 operands. Only start execution in the beginning of stage 2B. Once 
execution starts, takes 3 cycles to generate results at the end of stage
 3A for data. Rxx (AIA) however, will be generated at the end of stage 
2C.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_newvjump:</tt></td><td><font style="font-size: 8pt">Early
 operands for Rss, Rtt. Late operands for Rxx (if applicable). Only 
start execution in the beginning of stage 2B. Once execution starts, 
takes 2 cycles to generate results at the end of stage 3A. Any 
Stores,AIA or change of flow instruction following this instruction can 
start after 3 cycles. All other instructions following this instruction 
can start after 2 cycles. This is indicated by the NOBSB2 timing 
attribute.</font></td></tr>
<tr><td align="right" width="100"><tt>tc_st:</tt></td><td><font style="font-size: 8pt">Late
 operands for Rxx (data). Early operands for Rss(address) and 
Rtt(offset). Only start execution in the beginning of stage 2B. Rxx 
(AIA) will be generated 2 cycles later at the end of stage 2C.</font></td></tr>
</tbody></table>
   
</p></body></html>