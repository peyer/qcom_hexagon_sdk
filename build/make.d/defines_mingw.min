#============================================================================
#  Name:
#    defines_mingw.min
#
#  Description:
#    This file specifies the items necessary to build libraries using the
#    gcc toolchain, assuming mingw.
#
# Copyright 2006,2010 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------

# TODO: write in terms of defines_gcc.min

V_TOOLCHAIN=gcc

MINGW_BIN=$(if $(MINGW_DIR),$(MINGW_DIR)/bin/,)# assume path if MINGW_DIR unset

CC="$(MINGW_BIN)gcc"#
CXX="$(MINGW_BIN)g++"#

FEZ="$(MINGW_BIN)size"#

# suppress -Wformat because mingw gcc thinks %ll is unsupported by MSVCRT
GCC_FLAGS     = -Wall -Wno-format -Wno-missing-braces -Werror -D__NIX
GCC_OBJ_FLAGS = -c $(GCC_FLAGS)
GCC_MIX_FLAGS = -S $(GCC_FLAGS)

ifeq ($(V_ARCH),x86_64)
GCC_FLAGS+=-m64#
else
GCC_FLAGS+=-m32#
endif

CC_NO_WARN_UNUSED_FUNCTIONS=-Wno-unused-function

ifneq ($(V_FLAVOR),Release)
GCC_OBJ_FLAGS+=-g
endif

ifneq ($(V_FLAVOR),Debug)
ifneq ($(V_FLAVOR),Coverage)
GCC_OBJ_FLAGS+=-O2 -fno-strict-aliasing
endif
endif

ifeq ($(V_FLAVOR),Coverage)
GCC_OBJ_FLAGS+=-fprofile-arcs -ftest-coverage
LD_FLAGS+=-fprofile-arcs -ftest-coverage
endif

GCC_OBJ_FLAGS +=-D__FILENAME__=\"$(notdir $(<))\"#

CXX_FLAGS=$(GCC_OBJ_FLAGS)
CC_FLAGS=$(GCC_OBJ_FLAGS) -std=gnu99
CXX_MIX_FLAGS=$(GCC_MIX_FLAGS)
CC_MIX_FLAGS=$(GCC_MIX_FLAGS) -std=gnu99

CC_INC=

CC_INCFLAG=-I
CC_DEFINEFLAG=-D
CC_UNDEFINEFLAG=-U
CC_OUTPUTFLAG=-o
CC_MIX_OUTPUTFLAG=-o

CPP="$(MINGW_BIN)cpp"#
CPP_FLAGS=-C#

AR="$(MINGW_BIN)ar"#
AR_FLAGS=-rsc
AR_OUTPUTFLAG=

LD="$(MINGW_BIN)g++"#
LD_LIBDIRFLAG=-L
LD_OUTPUTFLAG=-o #

#
# gcc requires that we put libraries behind the callers
#
LD_INPUTS=-Wl,"-(" $(1) -Wl,"-)" $(LD_LIBS)

# We want '$ORIGIN' in the rpath (which makes the dynamic loader include the
# directory the executable lives in in the search path for shared libs), but
# to do that we need to escape it twice: once for Make, and once for the
# shell.

LD_FLAGS+=-Wl,-rpath=\$$ORIGIN -static-libgcc -static-libstdc++


ifeq ($(V_ARCH),x86_64)
LD_FLAGS+=-m64#
else
LD_FLAGS+=-m32#
endif

EXE_LD_FLAGS=$(LD_FLAGS)

DEFS_OF=$(foreach def,$(addsuffix .def,$(call uniq,$($(call NAME_OF,$(1))_DEFS)\
           $(foreach comp,$(call COMPONENTS_OF,$(1)),$(COMPONENT_$(comp)_DEFS)))),\
            -Wl,--version-script=$(def))

SO_LD_FLAGS=$(LD_FLAGS) -shared -Wl,-soname=$(@F)

DLL_LD_FLAGS=$(SO_LD_FLAGS) $(call DEFS_OF,$(@))

MOD_LD_FLAGS=$(SO_LD_FLAGS) -Wl,--no-undefined

ASM=as
ASM_OUTPUTFLAG=-o
ASM_FLAGS=
APP_FLAGS=-E
APP=$(CC)

#-----------------------------------------------------------------------------
# QEXE exec
#-----------------------------------------------------------------------------
QEXE_EXEC=$(call exec,$(1)) $(2)

#-----------------------------------------------------------------------------
# extensions
#-----------------------------------------------------------------------------
MOD_EXT=.dll1#
EXE_EXT=.exe#
DLL_EXT=.dll#
DLL_LIB_EXT=.lib#

# pull extensions
$(call INCLUDE_MAKE_D_EXTS,defines_mingw.min)
