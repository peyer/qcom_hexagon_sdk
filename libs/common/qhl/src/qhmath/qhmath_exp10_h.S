/**=============================================================================
@file
    qhmath_exp10_h.S

@brief
    Exponential base 10 function. Input is in Q15 signed format.
    Ouput  is in Q4.11 signed format.

    Function prototype
        int16_t qhmath_exp10_h(int16_t x)

    Reference C code
        int16_t qhmath_exp10_h(int16_t x)
        {
            int16_t ret_val;
            int32_t index;
            int16_t a, b;
            int16_t fract;

            // Find nearest index
            index = (uint32_t)x >> 6;

            if (x <= 0)
            {
                index += 1;
            }

            // Calculation of fractional value
            fract = (x - (index << 6)) << 8;

            // Read two nearest values of input value from the sin table
            a = exp10_lookup[index];
            b = exp10_lookup[index+1];

            // Linear interpolation process
            ret_val = (int32_t)(0x8000-fract)*a >> 16;
            ret_val = (int16_t)((((int32_t)ret_val << 16) + ((int32_t)fract*b)) >> 15);

            return ret_val;
        }

Copyright (c) 2019 Qualcomm Technologies Incorporated.
All Rights Reserved. Qualcomm Proprietary and Confidential.
=============================================================================**/

/*============================================================================*/

    .p2align 2
    .p2align 4,,15
    .globl qhmath_exp10_h
    .type qhmath_exp10_h,@function

/*============================================================================*/

#define x               r0
#define ret_val         r0
#define lookup_addr     r2
#define lookup_addr_1   r4
#define interpol        r4
#define idx             r3
#define fract           r1
#define table_0         r0
#define table_1         r3
#define linear_1        r4
#define linear_0        r3
#define neg_idx         r10
#define x_cast_h        r7

/* ========================================================================== */

qhmath_exp10_h:
{
    lookup_addr = add(pc,#exp10_lookup@PCREL)
    x_cast_h = zxth(x)
}
{
    lookup_addr_1 = add(lookup_addr,#2)
    idx = asr(x_cast_h,#7)
    fract = extractu(x_cast_h, #7, #0)
    neg_idx = #0
}
{
    p0 = cmp.gt(x, #0)
    fract = asl(fract, #8)
    if (!p0.new) neg_idx = #2
}

{
    lookup_addr = add(lookup_addr, neg_idx)
    lookup_addr_1 = add(lookup_addr_1, neg_idx)
}
{
    interpol = sub(#0x8000, fract)
    table_0 = memh(lookup_addr + idx<<#1)
    table_1 = memh(lookup_addr_1 + idx<<#1)
}
{
    linear_1 = mpy(fract,table_1.l):<<1:sat
    linear_0 = mpy(interpol, table_0.l):<<1:sat
}
{
    ret_val = add(linear_1, linear_0)
    jumpr r31
}
    .size qhmath_exp10_h, .-qhmath_exp10_h

    .type    exp10_lookup,@object
    .section .rodata
    .globl    exp10_lookup
    .p2align    2
exp10_lookup:
    .half 0x0800, 0x0812, 0x0825, 0x0838, 0x084b, 0x085e, 0x0871, 0x0885, 0x0898, 0x08ac, 0x08c0, 0x08d4, 0x08e9, 0x08fe, 0x0912, 0x0927, 0x093c, 0x0952, 0x0967, 0x097d, 0x0993, 0x09a9, 0x09c0, 0x09d6, 0x09ed, 0x0a04, 0x0a1b, 0x0a32, 0x0a4a, 0x0a62, 0x0a7a, 0x0a92
    .half 0x0aab, 0x0ac3, 0x0adc, 0x0af5, 0x0b0f, 0x0b28, 0x0b42, 0x0b5c, 0x0b76, 0x0b91, 0x0bac, 0x0bc7, 0x0be2, 0x0bfd, 0x0c19, 0x0c35, 0x0c51, 0x0c6e, 0x0c8b, 0x0ca8, 0x0cc5, 0x0ce2, 0x0d00, 0x0d1e, 0x0d3d, 0x0d5b, 0x0d7a, 0x0d99, 0x0db9, 0x0dd8, 0x0df8, 0x0e19
    .half 0x0e39, 0x0e5a, 0x0e7c, 0x0e9d, 0x0ebf, 0x0ee1, 0x0f03, 0x0f26, 0x0f49, 0x0f6c, 0x0f90, 0x0fb4, 0x0fd8, 0x0ffd, 0x1022, 0x1047, 0x106d, 0x1093, 0x10b9, 0x10e0, 0x1107, 0x112f, 0x1156, 0x117e, 0x11a7, 0x11d0, 0x11f9, 0x1223, 0x124c, 0x1277, 0x12a1, 0x12cd
    .half 0x12f8, 0x1324, 0x1350, 0x137d, 0x13aa, 0x13d7, 0x1405, 0x1434, 0x1462, 0x1492, 0x14c1, 0x14f1, 0x1522, 0x1552, 0x1584, 0x15b6, 0x15e8, 0x161a, 0x164e, 0x1681, 0x16b5, 0x16ea, 0x171f, 0x1754, 0x178a, 0x17c1, 0x17f8, 0x182f, 0x1867, 0x189f, 0x18d8, 0x1912
    .half 0x194c, 0x1986, 0x19c1, 0x19fd, 0x1a39, 0x1a76, 0x1ab3, 0x1af1, 0x1b2f, 0x1b6e, 0x1bad, 0x1bed, 0x1c2e, 0x1c6f, 0x1cb1, 0x1cf3, 0x1d36, 0x1d7a, 0x1dbe, 0x1e03, 0x1e48, 0x1e8e, 0x1ed5, 0x1f1c, 0x1f64, 0x1fad, 0x1ff6, 0x2040, 0x208b, 0x20d6, 0x2122, 0x216f
    .half 0x21bc, 0x220a, 0x2259, 0x22a8, 0x22f8, 0x2349, 0x239b, 0x23ed, 0x2440, 0x2494, 0x24e9, 0x253e, 0x2594, 0x25eb, 0x2643, 0x269b, 0x26f5, 0x274f, 0x27aa, 0x2805, 0x2862, 0x28bf, 0x291e, 0x297d, 0x29dd, 0x2a3d, 0x2a9f, 0x2b02, 0x2b65, 0x2bca, 0x2c2f, 0x2c95
    .half 0x2cfc, 0x2d64, 0x2dcd, 0x2e37, 0x2ea2, 0x2f0e, 0x2f7b, 0x2fe9, 0x3057, 0x30c7, 0x3138, 0x31aa, 0x321d, 0x3291, 0x3306, 0x337c, 0x33f3, 0x346b, 0x34e4, 0x355f, 0x35da, 0x3657, 0x36d4, 0x3753, 0x37d3, 0x3854, 0x38d6, 0x395a, 0x39df, 0x3a64, 0x3aec, 0x3b74
    .half 0x3bfd, 0x3c88, 0x3d14, 0x3da1, 0x3e30, 0x3ec0, 0x3f51, 0x3fe3, 0x4077, 0x410c, 0x41a3, 0x423b, 0x42d4, 0x436e, 0x440a, 0x44a8, 0x4546, 0x45e7, 0x4688, 0x472c, 0x47d0, 0x4876, 0x491e, 0x49c7, 0x4a72, 0x4b1e, 0x4bcc, 0x4c7b, 0x4d2c, 0x4dde, 0x4e92, 0x4f48
    .half 0x5000, 0x00cc, 0x00ce, 0x00d0, 0x00d2, 0x00d4, 0x00d6, 0x00d8, 0x00da, 0x00dc, 0x00de, 0x00e0, 0x00e2, 0x00e4, 0x00e6, 0x00e8, 0x00ea, 0x00ec, 0x00ee, 0x00f0, 0x00f2, 0x00f5, 0x00f7, 0x00f9, 0x00fb, 0x00fe, 0x0100, 0x0102, 0x0105, 0x0107, 0x0109, 0x010c
    .half 0x010e, 0x0111, 0x0113, 0x0116, 0x0118, 0x011b, 0x011d, 0x0120, 0x0122, 0x0125, 0x0128, 0x012a, 0x012d, 0x0130, 0x0132, 0x0135, 0x0138, 0x013b, 0x013e, 0x0141, 0x0144, 0x0146, 0x0149, 0x014c, 0x014f, 0x0152, 0x0155, 0x0159, 0x015c, 0x015f, 0x0162, 0x0165
    .half 0x0168, 0x016c, 0x016f, 0x0172, 0x0176, 0x0179, 0x017c, 0x0180, 0x0183, 0x0187, 0x018a, 0x018e, 0x0192, 0x0195, 0x0199, 0x019d, 0x01a0, 0x01a4, 0x01a8, 0x01ac, 0x01b0, 0x01b3, 0x01b7, 0x01bb, 0x01bf, 0x01c3, 0x01c8, 0x01cc, 0x01d0, 0x01d4, 0x01d8, 0x01dc
    .half 0x01e1, 0x01e5, 0x01ea, 0x01ee, 0x01f2, 0x01f7, 0x01fb, 0x0200, 0x0205, 0x0209, 0x020e, 0x0213, 0x0218, 0x021d, 0x0221, 0x0226, 0x022b, 0x0230, 0x0235, 0x023b, 0x0240, 0x0245, 0x024a, 0x024f, 0x0255, 0x025a, 0x0260, 0x0265, 0x026b, 0x0270, 0x0276, 0x027c
    .half 0x0281, 0x0287, 0x028d, 0x0293, 0x0299, 0x029f, 0x02a5, 0x02ab, 0x02b1, 0x02b7, 0x02be, 0x02c4, 0x02ca, 0x02d1, 0x02d7, 0x02de, 0x02e5, 0x02eb, 0x02f2, 0x02f9, 0x0300, 0x0307, 0x030e, 0x0315, 0x031c, 0x0323, 0x032a, 0x0332, 0x0339, 0x0341, 0x0348, 0x0350
    .half 0x0357, 0x035f, 0x0367, 0x036f, 0x0377, 0x037f, 0x0387, 0x038f, 0x0397, 0x03a0, 0x03a8, 0x03b0, 0x03b9, 0x03c2, 0x03ca, 0x03d3, 0x03dc, 0x03e5, 0x03ee, 0x03f7, 0x0400, 0x0409, 0x0413, 0x041c, 0x0426, 0x042f, 0x0439, 0x0443, 0x044d, 0x0456, 0x0461, 0x046b
    .half 0x0475, 0x047f, 0x048a, 0x0494, 0x049f, 0x04a9, 0x04b4, 0x04bf, 0x04ca, 0x04d5, 0x04e0, 0x04ec, 0x04f7, 0x0502, 0x050e, 0x051a, 0x0526, 0x0531, 0x053d, 0x054a, 0x0556, 0x0562, 0x056f, 0x057b, 0x0588, 0x0595, 0x05a2, 0x05af, 0x05bc, 0x05c9, 0x05d6, 0x05e4
    .half 0x05f2, 0x05ff, 0x060d, 0x061b, 0x0629, 0x0638, 0x0646, 0x0654, 0x0663, 0x0672, 0x0681, 0x0690, 0x069f, 0x06ae, 0x06be, 0x06cd, 0x06dd, 0x06ed, 0x06fd, 0x070d, 0x071e, 0x072e, 0x073f, 0x074f, 0x0760, 0x0771, 0x0783, 0x0794, 0x07a5, 0x07b7, 0x07c9, 0x07db
    .half 0x07ed, 0x0800, 0x0800
    .size    exp10_lookup, 1030
