/**=============================================================================
@file
    qhcomplex_cexp_f.S

@brief
    Computes the complex base-e exponential of z.

    Function prototype

        float complex cexpf(float complex x)

    Reference C code

        static const uint32_t
        exp_ovfl  = 0x42b17218,  // MAX_EXP * ln2 ~= 88.722839355
        cexp_ovfl = 0x43400074;  // (MAX_EXP - MIN_DENORM_EXP) * ln2

        static const uint32_t k = 235; // constant for reduction
        static const float kln2 = 162.88958740F; // k * ln2

        //
        // See __cexp.c for details.
        //
        // Input:  ln(FLT_MAX) <= x < ln(2 * FLT_MAX / FLT_MIN_DENORM) ~= 192.7
        // Output: 2**127 <= y < 2**128
        ///
        static float __frexp_expf(float x, int *expt)
        {
            float exp_x;
            uint32_t hx;

            exp_x = expf(x - kln2);
            GET_FLOAT_WORD(hx, exp_x);
            *expt = (hx >> 23) - (0x7f + 127) + k;
            SET_FLOAT_WORD(exp_x, (hx & 0x7fffff) | ((0x7f + 127) << 23));
            return exp_x;
        }

        static float complex __ldexp_cexpf(float complex z, int expt)
        {
            float x, y, exp_x, scale1, scale2;
            int ex_expt, half_expt;

            x = crealf(z);
            y = cimagf(z);
            exp_x = __frexp_expf(x, &ex_expt);
            expt += ex_expt;

            half_expt = expt / 2;
            SET_FLOAT_WORD(scale1, (0x7f + half_expt) << 23);
            half_expt = expt - half_expt;
            SET_FLOAT_WORD(scale2, (0x7f + half_expt) << 23);

            return CMPLXF(cosf(y) * exp_x * scale1 * scale2,
            sinf(y) * exp_x * scale1 * scale2);
        }

        float complex cexpf(float complex z)
        {
            float x, y, exp_x;
            uint32_t hx, hy;

            x = crealf(z);
            y = cimagf(z);

            GET_FLOAT_WORD(hy, y);
            hy &= 0x7fffffff;

            // cexp(x + I 0) = exp(x) + I 0
            if (hy == 0)
                return CMPLXF(expf(x), y);
            GET_FLOAT_WORD(hx, x);
            // cexp(0 + I y) = cos(y) + I sin(y)
            if ((hx & 0x7fffffff) == 0)
                return CMPLXF(cosf(y), sinf(y));

            if (hy >= 0x7f800000) {
                if ((hx & 0x7fffffff) != 0x7f800000) {
                    // cexp(finite|NaN +- I Inf|NaN) = NaN + I NaN
                    return CMPLXF(y - y, y - y);
                } else if (hx & 0x80000000) {
                    // cexp(-Inf +- I Inf|NaN) = 0 + I 0
                    return CMPLXF(0.0, 0.0);
                } else {
                    // cexp(+Inf +- I Inf|NaN) = Inf + I NaN
                    return CMPLXF(x, y - y);
                }
            }

            if (hx >= exp_ovfl && hx <= cexp_ovfl) {
                //
                // x is between 88.7 and 192, so we must scale to avoid
                // overflow in expf(x).
                return __ldexp_cexpf(z, 0);
            } else {
                //
                //  Cases covered here:
                //   -  x < exp_ovfl and exp(x) won't overflow (common case)
                //   -  x > cexp_ovfl, so exp(x) * s overflows for all s > 0
                //   -  x = +-Inf (generated by exp())
                //   -  x = NaN (spurious inexact exception from y)

                exp_x = expf(x);
                return CMPLXF(exp_x * cosf(y), exp_x * sinf(y));
            }
        }

@note
    Reference C code obtained from musl library.

    Copyright from musl:

    ---------------------------------------------------------------------------
    Copyright (c) 2011 David Schultz <das@FreeBSD.ORG>
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
    1. Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
    OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
    HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
    OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.
    ---------------------------------------------------------------------------

Copyright (c) 2019 Qualcomm Technologies Incorporated.
All Rights Reserved. Qualcomm Proprietary and Confidential.
=============================================================================**/

/*============================================================================*/

.p2align 2
.p2align 4,,15
.global qhcomplex_cexp_f
.type qhcomplex_cexp_f, @function

/*============================================================================*/

#define nan     0x7FFFFFFF
#define one     0x3F800000
#define inf     0x7F800000
#define inf_1   0x7F7FFFFF
#define c1      0x7F000000

qhcomplex_cexp_f:
{
    r2 = ##nan
    memd(r29+#-16) = r17:16
    allocframe(#24)
}
{
    r17:16 = combine(r1,r0)
}
{
    p0 = !bitsclr(r17,r2)
    if (!p0.new) jump:nt .L_y0
    memd(r29+#8) = r19:18
    memd(r29+#0) = r21:20
}
{
    p0 = !bitsclr(r16,r2)
    if (!p0.new) r0 = add(r17,#0)
    if (!p0.new) jump:nt .L_x0
}
{
    r2 = clrbit(r17,#31)
    r1 = clrbit(r16,#31)
}
{
    p0 = cmp.gtu(r2,##inf_1)
    if (!p0.new) jump:t .L_overflow
}
{
    p0 = cmp.eq(r1,##inf)                      // INF
    if (!p0.new) jump:nt .L_inf
}
{
    r2 = sfsub(r17,r17)
    p0 = cmp.gt(r16,#-1)
    if (!p0.new) r16 = #0
}
{
    r17 = mux(p0,r2,#0)
    jump .L_end
}
.falign
.L_y0:                                         //L_y0 handling e^(x + I0) = exp(x) + I 0
{
    call qhmath_exp_f
    r0 = r16
}
{
    r16 = r0
    jump .L_end
}
.falign
.L_x0:                                         //L_x0 handling e^(0 + I y) = cos(y) + I sin(y)
{
    call qhmath_cos_f
}
{
    call qhmath_sin_f
    r16 = r0
    r0 = r17
}
{
    r17 = r0
    jump .L_end
}
.falign
.L_overflow:
{
    r2 = add(r16,##-1118925336)
}
{
    p0 = cmp.gtu(r2,##9342556)
    if (p0.new) r0 = add(r16,#0)
    if (p0.new) jump:t .L_regular
}
{
    r2 = ##-1021123652                         // - kln2 / k = 235
    r18 = ##c1
}
{
    call qhmath_exp_f
    r0 = sfadd(r16,r2)                         // exp_x = expf(expf - kln2)
}
{
    r18 = insert(r0,#23,#0)
    r0 = add(##-19,lsr(r0,#23))
}
{
    r2 = r0
}
{
    r2 += lsr(r0,#31)
}
{
    r19 = asr(r2,#1)
}
{
    r19 = add(##one,asl(r19,#23))
    r20 = sub(r0,r19)
    r0 = r17
}
{
    r19 = sfmpy(r19,r18)
    r20 = add(##one,asl(r20,#23))
}
{
    r19 = sfmpy(r20,r19)
}
{
    call qhmath_cos_f
}
{
    r16 = sfmpy(r0,r19)
    r0 = r17
}
{
    call qhmath_sin_f
}
{
    r17 = sfmpy(r0,r19)
}
{
    jump .L_end
}
.falign
.L_inf:                                        // cexp(finite|NaN +- I Inf|NaN) = NaN + I NaN
{
    r16 = sfsub(r17,r17)
}
{
    r17 = r16
    jump .L_end
}
.falign
.L_regular:                                    // regular case e^x * cosf(y) + I * e^x * sin(y)
{
    call qhmath_exp_f
}
{
    call qhmath_cos_f
    r18 = r0
    r0 = r17
}
{
    call qhmath_sin_f
    r16 = sfmpy(r18,r0)
    r0 = r17
}
{
    r17 = sfmpy(r18,r0)
}
.falign
.L_end:                                        //Prepare complex output
{                                              // return r16 - r21 to previous state
    r1:0 = combine(r17,r16)
    r17:16 = memd(r29+#16)
    r19:18 = memd(r29+#8)
}
{
    r21:20 = memd(r29+#0)
    dealloc_return
}
    .size qhcomplex_cexp_f, .-qhcomplex_cexp_f
